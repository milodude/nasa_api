// Mocks generated by Mockito 5.4.4 from annotations
// in nasa_api/test/features/local_data/data/data_source/local_pictures_of_the_day_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nasa_api/core/providers/sembast_provider.dart' as _i2;
import 'package:sembast/sembast.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SembastProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSembastProvider extends _i1.Mock implements _i2.SembastProvider {
  MockSembastProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> insert<T extends _i2.BaseModel>(T? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [item],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> update<T extends _i2.BaseModel>(
    T? item,
    _i4.Filter? filter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            item,
            filter,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<int>> insertAll<T extends _i2.BaseModel>(List<T>? items) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [items],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<Iterable<T>> getAll<T extends _i2.BaseModel>(
          T Function(Map<String, Object?>)? fromJson) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [fromJson],
        ),
        returnValue: _i3.Future<Iterable<T>>.value(<T>[]),
      ) as _i3.Future<Iterable<T>>);

  @override
  _i3.Future<void> clear<T extends _i2.BaseModel>() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T?> getByFilter<T extends _i2.BaseModel>(
    _i4.Filter? filter,
    T Function(Map<String, Object?>)? fromJson,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByFilter,
          [
            filter,
            fromJson,
          ],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<void> clearByFilter<T extends _i2.BaseModel>(_i4.Filter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearByFilter,
          [filter],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
